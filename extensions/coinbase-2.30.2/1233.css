.b1kpd7hv{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-flow:column nowrap;-ms-flex-flow:column nowrap;flex-flow:column nowrap;margin:24px;}
.b1fu1pg{-webkit-transform:translateY(120%);-ms-transform:translateY(120%);transform:translateY(120%);-webkit-transition:-webkit-transform 0.3s ease-out;-webkit-transition:transform 0.3s ease-out;transition:transform 0.3s ease-out;}
/*# sourceMappingURL=data:application/json;base64,*/

/*# sourceMappingURL=1233.css.map*/