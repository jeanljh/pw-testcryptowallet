.ixmi1mo{width:32px;height:32px;-webkit-flex-shrink:0;-ms-flex-negative:0;flex-shrink:0;}
/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9jb21wb25lbnRzL1RyYW5zYWN0aW9uQ29uZmlybWF0aW9uVG9wU2VjdGlvbi9Ub3BTZWN0aW9uSXRlbS50c3giXSwibmFtZXMiOlsiLml4bWkxbW8iXSwibWFwcGluZ3MiOiJBQTJJTUEiLCJmaWxlIjoic3JjL2NvbXBvbmVudHMvVHJhbnNhY3Rpb25Db25maXJtYXRpb25Ub3BTZWN0aW9uL1RvcFNlY3Rpb25JdGVtLnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlYWN0Tm9kZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHN0eWxlZCB9IGZyb20gJ0BsaW5hcmlhL3JlYWN0JztcbmltcG9ydCB7IERlc3RpbmF0aW9uSWNvbiB9IGZyb20gJ0BzY3JlZW5zL1NlbmQvc3RlcHMvU2VsZWN0UmVjaXBpZW50U3RlcC9EZXN0aW5hdGlvbkljb24nO1xuaW1wb3J0IHsgTmV0d29yayB9IGZyb20gJ2NiLXdhbGxldC1kYXRhL3N0b3Jlcy9OZXR3b3Jrcy9tb2RlbHMvTmV0d29yayc7XG5pbXBvcnQgeyBEZXN0aW5hdGlvblR5cGUgfSBmcm9tICdjYi13YWxsZXQtZGF0YS9zdG9yZXMvUmVjaXBpZW50cy9tb2RlbHMvdHlwZXMnO1xuaW1wb3J0IHsgV2FsbGV0IH0gZnJvbSAnY2Itd2FsbGV0LWRhdGEvc3RvcmVzL1dhbGxldHMvbW9kZWxzL1dhbGxldCc7XG5pbXBvcnQgeyBvdmVyVmlld0ljb25GYWxsYmFja1RyYW5zcGFyZW5jeSB9IGZyb20gJ2NiLXdhbGxldC1kYXRhL3V0aWxzL3N0eWxlQ29uc3RhbnRzJztcbmltcG9ydCB7IEljb25OYW1lIH0gZnJvbSAnQGNiaHEvY2RzLXdlYic7XG5pbXBvcnQgeyBJY29uIH0gZnJvbSAnQGNiaHEvY2RzLXdlYi9pY29ucy9JY29uJztcbmltcG9ydCB7IEJveCwgSFN0YWNrLCBWU3RhY2sgfSBmcm9tICdAY2JocS9jZHMtd2ViL2xheW91dCc7XG5pbXBvcnQgeyBUZXh0SGVhZGxpbmUsIFRleHRMYWJlbDIgfSBmcm9tICdAY2JocS9jZHMtd2ViL3R5cG9ncmFwaHknO1xuXG5pbXBvcnQgeyBBc3NldEljb24sIEFzc2V0TGlrZVByb3BzIH0gZnJvbSAnLi4vQXNzZXRJY29uL0Fzc2V0SWNvbic7XG5cbmV4cG9ydCBjb25zdCBMQVJHRV9JQ09OX1NJWkUgPSAzMjtcblxudHlwZSBBc3NldEljb25Qcm9wcyA9IHtcbiAgYXNzZXQ6IHN0cmluZyB8IEFzc2V0TGlrZVByb3BzIHwgV2FsbGV0O1xufTtcblxuZnVuY3Rpb24gQXNzZXRJY29uRm9yVG9wU2VjdGlvbih7IGFzc2V0IH06IEFzc2V0SWNvblByb3BzKSB7XG4gIHN3aXRjaCAodHJ1ZSkge1xuICAgIGNhc2UgdHlwZW9mIGFzc2V0ID09PSAnc3RyaW5nJzpcbiAgICAgIHJldHVybiA8SW1hZ2Ugc3JjPXthc3NldCBhcyBzdHJpbmd9IGFsdD17YCR7YXNzZXR9IGljb25gfSAvPjtcblxuICAgIGNhc2UgYXNzZXQgaW5zdGFuY2VvZiBXYWxsZXQ6XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiA8QXNzZXRJY29uIGFzc2V0PXthc3NldCBhcyBXYWxsZXR9IC8+O1xuICB9XG59XG5cbmV4cG9ydCB0eXBlIFRvcFNlY3Rpb25JdGVtUHJvcHMgPSB7XG4gIGlzQXNzZXQ/OiBib29sZWFuO1xuICBpY29uU291cmNlT3JOYW1lOiBzdHJpbmcgfCBJY29uTmFtZSB8IEFzc2V0TGlrZVByb3BzIHwgV2FsbGV0O1xuICB0aXRsZTogc3RyaW5nIHwgUmVhY3ROb2RlO1xuICBkZXRhaWw/OiBzdHJpbmc7XG4gIHRlc3RJRD86IHN0cmluZztcbiAgc3ViRGV0YWlsPzogc3RyaW5nO1xuICB0ZXh0Q29sb3JPdmVycmlkZT86IHN0cmluZztcbiAgbmV0d29yaz86IE5ldHdvcms7XG4gIGRlc3RpbmF0aW9uVHlwZT86IERlc3RpbmF0aW9uVHlwZTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBUb3BTZWN0aW9uSXRlbSh7XG4gIGlzQXNzZXQsXG4gIGljb25Tb3VyY2VPck5hbWUsXG4gIHRpdGxlLFxuICBkZXRhaWwsXG4gIHRlc3RJRCxcbiAgc3ViRGV0YWlsLFxuICBuZXR3b3JrLFxuICBkZXN0aW5hdGlvblR5cGUsXG4gIHRleHRDb2xvck92ZXJyaWRlLFxufTogVG9wU2VjdGlvbkl0ZW1Qcm9wcykge1xuICByZXR1cm4gKFxuICAgIDxIU3RhY2tcbiAgICAgIGp1c3RpZnlDb250ZW50PVwic3BhY2UtYmV0d2VlblwiXG4gICAgICB3aWR0aD1cIjEwMCVcIlxuICAgICAgYWxpZ25Db250ZW50PVwiY2VudGVyXCJcbiAgICAgIGFsaWduSXRlbXM9XCJjZW50ZXJcIlxuICAgICAgc3BhY2luZ1ZlcnRpY2FsPXsxfVxuICAgID5cbiAgICAgIDxIU3RhY2sgYWxpZ25JdGVtcz1cImNlbnRlclwiPlxuICAgICAgICA8Qm94IHNwYWNpbmdFbmQ9ezAuNX0+XG4gICAgICAgICAgeyFpc0Fzc2V0ICYmIGljb25Tb3VyY2VPck5hbWUgPT09ICd3YWxsZXQnICYmIChcbiAgICAgICAgICAgIDxCb3hcbiAgICAgICAgICAgICAgYWxpZ25JdGVtcz1cImNlbnRlclwiXG4gICAgICAgICAgICAgIGp1c3RpZnlDb250ZW50PVwiY2VudGVyXCJcbiAgICAgICAgICAgICAgZGFuZ2Vyb3VzbHlTZXRCYWNrZ3JvdW5kPXtvdmVyVmlld0ljb25GYWxsYmFja1RyYW5zcGFyZW5jeX1cbiAgICAgICAgICAgICAgYm9yZGVyUmFkaXVzPVwic3RhbmRhcmRcIlxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICA8RGVzdGluYXRpb25JY29uXG4gICAgICAgICAgICAgICAgdHlwZT17ZGVzdGluYXRpb25UeXBlfVxuICAgICAgICAgICAgICAgIG5ldHdvcms9e25ldHdvcmt9XG4gICAgICAgICAgICAgICAgdGVzdElEPVwidG9wLXNlY3Rpb24taXRlbS1kZXN0aW5hdGlvbi1pY29uXCJcbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgICl9XG5cbiAgICAgICAgICB7aXNBc3NldCA/IChcbiAgICAgICAgICAgIDxBc3NldEljb25Gb3JUb3BTZWN0aW9uIGFzc2V0PXtpY29uU291cmNlT3JOYW1lfSAvPlxuICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICBpY29uU291cmNlT3JOYW1lICE9PSAnd2FsbGV0JyAmJiA8SWNvbiBuYW1lPXtpY29uU291cmNlT3JOYW1lIGFzIEljb25OYW1lfSBzaXplPVwibFwiIC8+XG4gICAgICAgICAgKX1cbiAgICAgICAgPC9Cb3g+XG4gICAgICAgIHt0eXBlb2YgdGl0bGUgPT09ICdzdHJpbmcnID8gKFxuICAgICAgICAgIDxUZXh0SGVhZGxpbmVcbiAgICAgICAgICAgIHRlc3RJRD17YHRyYW5zYWN0aW9uLWNvbmZpcm1hdGlvbi10aXRsZS0ke3Rlc3RJRH1gfVxuICAgICAgICAgICAgYXM9XCJwXCJcbiAgICAgICAgICAgIHNwYWNpbmdTdGFydD17MX1cbiAgICAgICAgICAgIHRhYkluZGV4PXswfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHt0aXRsZX1cbiAgICAgICAgICA8L1RleHRIZWFkbGluZT5cbiAgICAgICAgKSA6IChcbiAgICAgICAgICB0aXRsZVxuICAgICAgICApfVxuICAgICAgPC9IU3RhY2s+XG4gICAgICA8VlN0YWNrIGp1c3RpZnlDb250ZW50PVwiZmxleC1lbmRcIj5cbiAgICAgICAge2RldGFpbCAmJiAoXG4gICAgICAgICAgPFRleHRIZWFkbGluZVxuICAgICAgICAgICAgdGVzdElEPXtgdHJhbnNhY3Rpb24tdG9wLXNlY3Rpb24taGVhZGxpbmUtJHt0ZXN0SUR9YH1cbiAgICAgICAgICAgIGFzPVwicFwiXG4gICAgICAgICAgICBzcGFjaW5nU3RhcnQ9ezF9XG4gICAgICAgICAgICBhbGlnbj1cImVuZFwiXG4gICAgICAgICAgICB0YWJJbmRleD17MH1cbiAgICAgICAgICAgIGNvbG9yPXt0ZXh0Q29sb3JPdmVycmlkZSA/ICduZWdhdGl2ZScgOiAnZm9yZWdyb3VuZCd9XG4gICAgICAgICAgPlxuICAgICAgICAgICAge2RldGFpbH1cbiAgICAgICAgICA8L1RleHRIZWFkbGluZT5cbiAgICAgICAgKX1cbiAgICAgICAgeyFkZXRhaWwgJiYgc3ViRGV0YWlsICYmIChcbiAgICAgICAgICA8VGV4dEhlYWRsaW5lXG4gICAgICAgICAgICB0ZXN0SUQ9e2B0cmFuc2FjdGlvbi10b3Atc2VjdGlvbi1oZWFkbGluZS0ke3Rlc3RJRH1gfVxuICAgICAgICAgICAgYXM9XCJwXCJcbiAgICAgICAgICAgIHNwYWNpbmdTdGFydD17MX1cbiAgICAgICAgICAgIGFsaWduPVwiZW5kXCJcbiAgICAgICAgICAgIHRhYkluZGV4PXswfVxuICAgICAgICAgICAgY29sb3I9e3RleHRDb2xvck92ZXJyaWRlID8gJ25lZ2F0aXZlJyA6ICdmb3JlZ3JvdW5kJ31cbiAgICAgICAgICA+XG4gICAgICAgICAgICB7c3ViRGV0YWlsfVxuICAgICAgICAgIDwvVGV4dEhlYWRsaW5lPlxuICAgICAgICApfVxuICAgICAgICB7ZGV0YWlsICYmIHN1YkRldGFpbCAmJiAoXG4gICAgICAgICAgPFRleHRMYWJlbDJcbiAgICAgICAgICAgIHRlc3RJRD17YHRyYW5zYWN0aW9uLXRvcC1zZWN0aW9uLXN1YkRldGFpbC0ke3Rlc3RJRH1gfVxuICAgICAgICAgICAgYXM9XCJwXCJcbiAgICAgICAgICAgIGNvbG9yPXt0ZXh0Q29sb3JPdmVycmlkZSA/ICduZWdhdGl2ZScgOiAnZm9yZWdyb3VuZE11dGVkJ31cbiAgICAgICAgICAgIGFsaWduPVwiZW5kXCJcbiAgICAgICAgICAgIHRhYkluZGV4PXswfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHtzdWJEZXRhaWx9XG4gICAgICAgICAgPC9UZXh0TGFiZWwyPlxuICAgICAgICApfVxuICAgICAgPC9WU3RhY2s+XG4gICAgPC9IU3RhY2s+XG4gICk7XG59XG5cbmNvbnN0IEltYWdlID0gc3R5bGVkLmltZ2BcbiAgd2lkdGg6ICR7TEFSR0VfSUNPTl9TSVpFfXB4O1xuICBoZWlnaHQ6ICR7TEFSR0VfSUNPTl9TSVpFfXB4O1xuICBmbGV4LXNocmluazogMDtcbmA7XG4iXX0=*/
.n1kjpajf{position:absolute;bottom:0;right:0;width:16px;height:16px;left:20px;top:22px;border-radius:50%;}
/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9jb21wb25lbnRzL1RyYW5zYWN0aW9uRGV0YWlscy9EYXBwVHJhbnNhY3Rpb25SZXF1ZXN0SGVhZGVyLnRzeCJdLCJuYW1lcyI6WyIubjFranBhamYiXSwibWFwcGluZ3MiOiJBQStGTUEiLCJmaWxlIjoic3JjL2NvbXBvbmVudHMvVHJhbnNhY3Rpb25EZXRhaWxzL0RhcHBUcmFuc2FjdGlvblJlcXVlc3RIZWFkZXIudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbWVtbywgdXNlQ2FsbGJhY2ssIHVzZU1lbW8sIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgZGVmaW5lTWVzc2FnZXMsIHVzZUludGwgfSBmcm9tICdyZWFjdC1pbnRsJztcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BsaW5hcmlhL2NvcmUnO1xuaW1wb3J0IHsgZ2V0SG9zdE5hbWVGb3JEYXBwIH0gZnJvbSAnQHV0aWwvZ2V0SG9zdE5hbWVGb3JEYXBwJztcbmltcG9ydCB7IERhcHBJbmZvIH0gZnJvbSAnY2Itd2FsbGV0LWRhdGEvY2hhaW5zL0FjY291bnRCYXNlZC9zaGFyZWQvdHlwZXMvRGFwcEluZm8nO1xuaW1wb3J0IHsgQm94LCBIU3RhY2ssIFZTdGFjayB9IGZyb20gJ0BjYmhxL2Nkcy13ZWIvbGF5b3V0JztcbmltcG9ydCB7IFJlbW90ZUltYWdlIH0gZnJvbSAnQGNiaHEvY2RzLXdlYi9tZWRpYS9SZW1vdGVJbWFnZSc7XG5pbXBvcnQgeyBUZXh0SGVhZGxpbmUsIFRleHRMZWdhbCB9IGZyb20gJ0BjYmhxL2Nkcy13ZWIvdHlwb2dyYXBoeSc7XG5cbnR5cGUgUHJvcHMgPSB7XG4gIGRhcHBJbmZvOiBEYXBwSW5mbztcbn07XG5cbmNvbnN0IG1lc3NhZ2VzID0gZGVmaW5lTWVzc2FnZXMoe1xuICB0aXRsZToge1xuICAgIGRlZmF1bHRNZXNzYWdlOiAnUmV2aWV3JyxcbiAgICBkZXNjcmlwdGlvbjogJ3JldmlldyB0aXRsZScsXG4gIH0sXG4gIGRhcHBVcmxSZXF1ZXN0VGV4dDoge1xuICAgIGRlZmF1bHRNZXNzYWdlOiAnUmVxdWVzdCBmcm9tIDxkb21haW5OYW1lPntkYXBwVVJMfTwvZG9tYWluTmFtZT4nLFxuICAgIGRlc2NyaXB0aW9uOiAnRGFwcCByZXF1ZXN0IGhvc3QgVVJMJyxcbiAgfSxcbn0pO1xuXG5mdW5jdGlvbiBEYXBwVHJhbnNhY3Rpb25SZXF1ZXN0SGVhZGVyRGV0YWlsKHsgZGFwcEluZm8gfTogUHJvcHMpIHtcbiAgY29uc3QgeyBmb3JtYXRNZXNzYWdlIH0gPSB1c2VJbnRsKCk7XG5cbiAgY29uc3QgeyBkYXBwTG9nb1VSTCwgZGFwcExvZ29VUkxBbHQsIG5ldHdvcmtCYWRnZVVSTCwgbmV0d29ya0JhZGdlQWx0LCBkYXBwVVJMIH0gPSBkYXBwSW5mbztcbiAgY29uc3QgW3NvdXJjZVVybCwgc2V0U291cmNlVXJsXSA9IHVzZVN0YXRlKGRhcHBMb2dvVVJMKTtcbiAgY29uc3Qgc2V0QWx0ZXJuYXRpdmVEYXBwTG9nb1VSTCA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBzZXRTb3VyY2VVcmwoZGFwcExvZ29VUkxBbHQpO1xuICB9LCBbZGFwcExvZ29VUkxBbHRdKTtcblxuICBjb25zdCBkYXBwSG9zdG5hbWU6IHN0cmluZyA9IHVzZU1lbW8oKCkgPT4ge1xuICAgIHJldHVybiBnZXRIb3N0TmFtZUZvckRhcHAoZGFwcFVSTCk7XG4gIH0sIFtkYXBwVVJMXSk7XG5cbiAgY29uc3QgZG9tYWluTmFtZUNvbXBvbmVudCA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICByZXR1cm4gZnVuY3Rpb24gZ2V0RG9tYWluTmFtZUNvbXBvbmVudChjb250ZW50czogUmVhY3QuUmVhY3ROb2RlKSB7XG4gICAgICByZXR1cm4gW1xuICAgICAgICA8VGV4dExlZ2FsXG4gICAgICAgICAgYXM9XCJzcGFuXCJcbiAgICAgICAgICBjb2xvcj1cImZvcmVncm91bmRNdXRlZFwiXG4gICAgICAgICAga2V5PVwiZG9tYWluLW5hbWUtc3R5bGVcIlxuICAgICAgICAgIHRlc3RJRD1cInN1YnNjcmlwdGlvbi1ib2xkLXRleHRcIlxuICAgICAgICA+XG4gICAgICAgICAge2NvbnRlbnRzfVxuICAgICAgICA8L1RleHRMZWdhbD4sXG4gICAgICBdO1xuICAgIH07XG4gIH0sIFtdKTtcblxuICByZXR1cm4gKFxuICAgIDxCb3ggYWxpZ25JdGVtcz1cImZsZXgtc3RhcnRcIj5cbiAgICAgIDxIU3RhY2tcbiAgICAgICAgc3BhY2luZ0VuZD17Mn1cbiAgICAgICAgaGVpZ2h0PVwiMTAwJVwiXG4gICAgICAgIGFsaWduU2VsZj1cImNlbnRlclwiXG4gICAgICAgIHBvc2l0aW9uPVwicmVsYXRpdmVcIlxuICAgICAgICB0ZXN0SUQ9XCJkYXBwLXRyYW5zYWN0aW9uLXJlcXVlc3QtaGVhZGVyXCJcbiAgICAgID5cbiAgICAgICAgPEJveCBwb3NpdGlvbj1cInJlbGF0aXZlXCI+XG4gICAgICAgICAgPFJlbW90ZUltYWdlXG4gICAgICAgICAgICBzb3VyY2U9e3NvdXJjZVVybH1cbiAgICAgICAgICAgIHJlc2l6ZU1vZGU9XCJjb250YWluXCJcbiAgICAgICAgICAgIHdpZHRoPXszMn1cbiAgICAgICAgICAgIGhlaWdodD17MzJ9XG4gICAgICAgICAgICBzaGFwZT1cInNxdWlyY2xlXCJcbiAgICAgICAgICAgIGFsdD17ZGFwcExvZ29VUkxBbHR9XG4gICAgICAgICAgICBvbkVycm9yPXtzZXRBbHRlcm5hdGl2ZURhcHBMb2dvVVJMfVxuICAgICAgICAgIC8+XG4gICAgICAgICAge25ldHdvcmtCYWRnZVVSTCA/IChcbiAgICAgICAgICAgIDxpbWcgY2xhc3NOYW1lPXtuZXR3b3JrQmFkZ2V9IHNyYz17bmV0d29ya0JhZGdlVVJMfSBhbHQ9e25ldHdvcmtCYWRnZUFsdH0gLz5cbiAgICAgICAgICApIDogbnVsbH1cbiAgICAgICAgPC9Cb3g+XG4gICAgICA8L0hTdGFjaz5cbiAgICAgIDxIU3RhY2s+XG4gICAgICAgIDxWU3RhY2s+XG4gICAgICAgICAgPFRleHRIZWFkbGluZSBhcz1cImgxXCIgdGFiSW5kZXg9ezB9IHNwYWNpbmdCb3R0b209ezAuNX0+XG4gICAgICAgICAgICB7Zm9ybWF0TWVzc2FnZShtZXNzYWdlcy50aXRsZSl9XG4gICAgICAgICAgPC9UZXh0SGVhZGxpbmU+XG4gICAgICAgICAgPFRleHRMZWdhbCBhcz1cInBcIiBjb2xvcj1cImZvcmVncm91bmRNdXRlZFwiPlxuICAgICAgICAgICAge2Zvcm1hdE1lc3NhZ2UobWVzc2FnZXMuZGFwcFVybFJlcXVlc3RUZXh0LCB7XG4gICAgICAgICAgICAgIGRhcHBVUkw6IGRhcHBIb3N0bmFtZSxcbiAgICAgICAgICAgICAgZG9tYWluTmFtZTogZG9tYWluTmFtZUNvbXBvbmVudCxcbiAgICAgICAgICAgIH0pfVxuICAgICAgICAgIDwvVGV4dExlZ2FsPlxuICAgICAgICA8L1ZTdGFjaz5cbiAgICAgIDwvSFN0YWNrPlxuICAgIDwvQm94PlxuICApO1xufVxuXG5leHBvcnQgY29uc3QgRGFwcFRyYW5zYWN0aW9uUmVxdWVzdEhlYWRlciA9IG1lbW8oRGFwcFRyYW5zYWN0aW9uUmVxdWVzdEhlYWRlckRldGFpbCk7XG5cbmNvbnN0IG5ldHdvcmtCYWRnZSA9IGNzc2BcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICBib3R0b206IDA7XG4gIHJpZ2h0OiAwO1xuICB3aWR0aDogMTZweDtcbiAgaGVpZ2h0OiAxNnB4O1xuICBsZWZ0OiAyMHB4O1xuICB0b3A6IDIycHg7XG4gIGJvcmRlci1yYWRpdXM6IDUwJTtcbmA7XG4iXX0=*/
.oml3xwg{position:relative;}.oml3xwg::before{content:'';width:0;height:0;border:1em solid transparent;position:absolute;left:85%;top:-28px;border-bottom:16px solid #330004;}
/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9jb21wb25lbnRzL091dGxpbmVCb3gvT3V0bGluZUJveC50c3giXSwibmFtZXMiOlsiLm9tbDN4d2ciXSwibWFwcGluZ3MiOiJBQXVCYUEiLCJmaWxlIjoic3JjL2NvbXBvbmVudHMvT3V0bGluZUJveC9PdXRsaW5lQm94LnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlYWN0Tm9kZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BsaW5hcmlhL2NvcmUnO1xuaW1wb3J0IHsgQm94IH0gZnJvbSAnQGNiaHEvY2RzLXdlYi9sYXlvdXQnO1xuXG50eXBlIFByb3BzID0ge1xuICBjaGlsZHJlbjogUmVhY3ROb2RlO1xuICB0ZXN0SUQ/OiBzdHJpbmc7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIE91dGxpbmVCb3goeyBjaGlsZHJlbiB9OiBQcm9wcykge1xuICByZXR1cm4gKFxuICAgIDxCb3hcbiAgICAgIGRhbmdlcm91c2x5U2V0Q2xhc3NOYW1lPXtPdXRsaW5lfVxuICAgICAgYm9yZGVyUmFkaXVzPVwic3RhbmRhcmRcIlxuICAgICAgZGFuZ2Vyb3VzbHlTZXRCYWNrZ3JvdW5kPVwiIzMzMDAwNFwiXG4gICAgICBzcGFjaW5nSG9yaXpvbnRhbD17MX1cbiAgICAgIHNwYWNpbmdWZXJ0aWNhbD17MX1cbiAgICAgIHdpZHRoPVwiMTAwJVwiXG4gICAgPlxuICAgICAge2NoaWxkcmVufVxuICAgIDwvQm94PlxuICApO1xufVxuXG5leHBvcnQgY29uc3QgT3V0bGluZSA9IGNzc2BcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICA6OmJlZm9yZSB7XG4gICAgY29udGVudDogJyc7XG4gICAgd2lkdGg6IDA7XG4gICAgaGVpZ2h0OiAwO1xuICAgIGJvcmRlcjogMWVtIHNvbGlkIHRyYW5zcGFyZW50O1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICBsZWZ0OiA4NSU7XG4gICAgdG9wOiAtMjhweDtcbiAgICBib3JkZXItYm90dG9tOiAxNnB4IHNvbGlkICMzMzAwMDQ7XG4gIH1cbmA7XG4iXX0=*/
.dascvte{margin:0 8px 0 0;color:var(--foreground-muted);font-size:16px;}
/*# sourceMappingURL=data:application/json;base64,*/
.s9ewtng{color:var(--primary);font-size:62px;}
.c1r01jj6{max-width:var(--c1r01jj6-0);display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex:1;-ms-flex:1;flex:1;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;position:relative;-webkit-transform:scale(var(--c1r01jj6-1));-ms-transform:scale(var(--c1r01jj6-1));transform:scale(var(--c1r01jj6-1));}
.i1xlw7kv{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}
.s1yu49fi{width:var(--s1yu49fi-0);padding:0;margin:0;box-shadow:none;border:none;overflow:hidden;outline:none;color:var(--primary);font-family:CoinbaseSans;font-size:62px;text-align:right;background-color:var(--background);}.s1yu49fi::-webkit-input-placeholder{color:var(--primary);line-height:normal;opacity:1;}.s1yu49fi::-moz-placeholder{color:var(--primary);line-height:normal;opacity:1;}.s1yu49fi:-ms-input-placeholder{color:var(--primary);line-height:normal;opacity:1;}.s1yu49fi::placeholder{color:var(--primary);line-height:normal;opacity:1;}
.s1skq4f0{font-family:CoinbaseSans;font-size:62px;text-align:left;position:absolute;bottom:0;right:0;visibility:hidden;}
/*# sourceMappingURL=data:application/json;base64,*/
.cds-lottieStyles-l1195b04 .palette_foreground_stroke{stroke:var(--foreground)}.cds-lottieStyles-l1195b04 .palette_foreground_fill{fill:var(--foreground)}.cds-lottieStyles-l1195b04 .palette_foregroundMuted_stroke{stroke:var(--foreground-muted)}.cds-lottieStyles-l1195b04 .palette_foregroundMuted_fill{fill:var(--foreground-muted)}.cds-lottieStyles-l1195b04 .palette_background_stroke{stroke:var(--background)}.cds-lottieStyles-l1195b04 .palette_background_fill{fill:var(--background)}.cds-lottieStyles-l1195b04 .palette_backgroundAlternate_stroke{stroke:var(--background-alternate)}.cds-lottieStyles-l1195b04 .palette_backgroundAlternate_fill{fill:var(--background-alternate)}.cds-lottieStyles-l1195b04 .palette_backgroundOverlay_stroke{stroke:var(--background-overlay)}.cds-lottieStyles-l1195b04 .palette_backgroundOverlay_fill{fill:var(--background-overlay)}.cds-lottieStyles-l1195b04 .palette_line_stroke{stroke:var(--line)}.cds-lottieStyles-l1195b04 .palette_line_fill{fill:var(--line)}.cds-lottieStyles-l1195b04 .palette_lineHeavy_stroke{stroke:var(--line-heavy)}.cds-lottieStyles-l1195b04 .palette_lineHeavy_fill{fill:var(--line-heavy)}.cds-lottieStyles-l1195b04 .palette_primary_stroke{stroke:var(--primary)}.cds-lottieStyles-l1195b04 .palette_primary_fill{fill:var(--primary)}.cds-lottieStyles-l1195b04 .palette_primaryWash_stroke{stroke:var(--primary-wash)}.cds-lottieStyles-l1195b04 .palette_primaryWash_fill{fill:var(--primary-wash)}.cds-lottieStyles-l1195b04 .palette_primaryForeground_stroke{stroke:var(--primary-foreground)}.cds-lottieStyles-l1195b04 .palette_primaryForeground_fill{fill:var(--primary-foreground)}.cds-lottieStyles-l1195b04 .palette_negative_stroke{stroke:var(--negative)}.cds-lottieStyles-l1195b04 .palette_negative_fill{fill:var(--negative)}.cds-lottieStyles-l1195b04 .palette_negativeForeground_stroke{stroke:var(--negative-foreground)}.cds-lottieStyles-l1195b04 .palette_negativeForeground_fill{fill:var(--negative-foreground)}.cds-lottieStyles-l1195b04 .palette_positive_stroke{stroke:var(--positive)}.cds-lottieStyles-l1195b04 .palette_positive_fill{fill:var(--positive)}.cds-lottieStyles-l1195b04 .palette_positiveForeground_stroke{stroke:var(--positive-foreground)}.cds-lottieStyles-l1195b04 .palette_positiveForeground_fill{fill:var(--positive-foreground)}.cds-lottieStyles-l1195b04 .palette_secondary_stroke{stroke:var(--secondary)}.cds-lottieStyles-l1195b04 .palette_secondary_fill{fill:var(--secondary)}.cds-lottieStyles-l1195b04 .palette_secondaryForeground_stroke{stroke:var(--secondary-foreground)}.cds-lottieStyles-l1195b04 .palette_secondaryForeground_fill{fill:var(--secondary-foreground)}.cds-lottieStyles-l1195b04 .palette_transparent_stroke{stroke:var(--transparent)}.cds-lottieStyles-l1195b04 .palette_transparent_fill{fill:var(--transparent)}

/*# sourceMappingURL=2627.css.map*/