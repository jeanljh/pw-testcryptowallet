.dq7btjj > div > div{opacity:1 !important;}
/*# sourceMappingURL=data:application/json;base64,*/
.sscjc7e{position:-webkit-sticky;position:sticky;background-color:var(--background);bottom:0;z-index:999;}
/*# sourceMappingURL=data:application/json;base64,*/

/*# sourceMappingURL=7927.css.map*/