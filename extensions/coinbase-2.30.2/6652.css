.c1st63i{width:80px;height:80px;border-radius:50%;}
.p11poyeu{word-break:break-word;margin:0;}
/*# sourceMappingURL=data:application/json;base64,{"version":3,"sources":["src/screens/Web3/SignatureRequest/SignatureRequest.tsx"],"names":[".c1st63i",".p11poyeu"],"mappings":"AAoaMA;AAMAC","file":"src/screens/Web3/SignatureRequest/SignatureRequest.tsx","sourcesContent":["import { useCallback, useContext, useEffect, useState } from 'react';\nimport { defineMessages, useIntl } from 'react-intl';\nimport { WalletUIError } from '@coinbase/wallet-sdk/dist/provider/WalletUIError';\nimport { UserAvatar } from '@components/UserAvatar/UserAvatar';\nimport { WarningBanner } from '@components/WarningBanner/WarningBanner';\nimport { BlocklistContext } from '@contexts/BlocklistContext';\nimport { AppLockTypes, UnlockResult } from '@datalayer/application/repositories/AppLockRepository';\nimport { useSigningDevice } from '@hooks/useSigningDevice/useSigningDevice';\nimport { useSignMessageLedger } from '@hooks/useSignMessageLedger/useSignMessageLedger';\nimport { appLockRepository } from '@init/repositories';\nimport { css } from '@linaria/core';\nimport { HWTroubleConnecting } from '@screens/Onboarding/steps/HardwareWallet/ledger/HWTroubleConnecting/HWTroubleConnecting';\nimport { UNSUPPORTED_SIGNING_CODE } from '@screens/Onboarding/steps/HardwareWallet/ledger/HWTroubleConnecting/mapErrorToCopy';\nimport {\n  triggerWeb3CancelMessageClicked,\n  triggerWeb3SignMessageClicked,\n  triggerWeb3SignMessageError,\n} from '@screens/Web3/eventing';\nimport { completeSignedMessage as completeSignedEVMMessage } from '@screens/Web3/hooks/evm/completeSignedMessage';\nimport { completeSignedMessage as completeSignedSolanaMessage } from '@screens/Web3/hooks/solana/completeSignedMessage';\nimport { useBuildDappMessageSignature } from '@screens/Web3/hooks/useBuildDappMessageSignature';\nimport { useCancel } from '@screens/Web3/hooks/useCancel';\nimport { useHandleNextQueuedRequest } from '@screens/Web3/hooks/useHandleNextQueuedRequest';\nimport { useHasNextQueuedRequest } from '@screens/Web3/hooks/useHasNextQueuedRequest';\nimport { SolanaSignMessage } from '@util/app-states/solana/appState';\nimport { log } from '@util/log';\nimport { SignEthereumMessage } from '@util/Pubsub';\nimport { LedgerError } from 'cb-wallet-data/chains/AccountBased/Ethereum/Transactions/ledgerError';\nimport { useIsMultiAccountPhase1Enabled } from 'cb-wallet-data/stores/Accounts/hooks/useIsMultiAccountPhase1Enabled';\nimport { hardwareWalletSigningAtom } from 'cb-wallet-data/stores/HardwareWallet/state';\nimport { useUserProfile } from 'cb-wallet-data/stores/Profile/hooks/useUserProfile';\nimport { useMessageScanner } from 'cb-wallet-data/stores/TxScanner/hooks/useMessageScanner';\nimport { DAPP_PROVIDER_PRIMARY_BLOCKCHAIN_MAPPING } from 'cb-wallet-data/Web3/constants';\nimport { EVM_PROVIDER_ID } from 'cb-wallet-data/Web3/evm/constants';\nimport { SOLANA_PROVIDER_ID } from 'cb-wallet-data/Web3/solana/constants';\nimport { useRecoilState } from 'recoil';\nimport { Hex, hexToString } from 'web3-utils';\nimport { Button, ButtonGroup } from '@cbhq/cds-web/buttons';\nimport { Icon } from '@cbhq/cds-web/icons/Icon';\nimport { Box, HStack, VStack } from '@cbhq/cds-web/layout';\nimport { Tooltip } from '@cbhq/cds-web/overlays/Tooltip/Tooltip';\nimport { TextBody, TextHeadline, TextLabel2, TextTitle3 } from '@cbhq/cds-web/typography';\nimport { sendScheduledEvents } from '@cbhq/client-analytics';\n\nconst messages = defineMessages({\n  signatureRequested: {\n    defaultMessage: 'Signature requested',\n    description: 'Signature Requested Label',\n  },\n  signatureRequestedTooltip: {\n    defaultMessage: 'This dapp requires you to sign a message before you can proceed.',\n    description: 'Tooltip label for signature request that displays on hover over info icon',\n  },\n  specialSignatureRequest: {\n    defaultMessage: 'Special signature request',\n    description: 'Special signature request label',\n  },\n  messageLabel: {\n    defaultMessage: 'Message',\n    description: 'Message Label',\n  },\n  signButtonLabel: {\n    defaultMessage: 'Sign',\n    description: 'Sign Button Label',\n  },\n  cancelButtonLabel: {\n    defaultMessage: 'Deny',\n    description: 'Cancel Button Label',\n  },\n  userAvatarToolTip: {\n    defaultMessage: 'Signing with {profile}',\n    description: 'User Avatar tooltip',\n  },\n});\n\nexport type EVMDappSignatureRequestProps = {\n  dappProviderType: typeof EVM_PROVIDER_ID;\n  options: SignEthereumMessage;\n};\n\nexport type SolanaDappSignatureRequestProps = {\n  dappProviderType: typeof SOLANA_PROVIDER_ID;\n  options: SolanaSignMessage;\n};\n\nexport type SignatureRequestProps = EVMDappSignatureRequestProps | SolanaDappSignatureRequestProps;\n\nexport function SignatureRequest(props: SignatureRequestProps) {\n  const { isStandalone, isLedger } = useSigningDevice();\n  const { options, dappProviderType } = props;\n  const { formatMessage } = useIntl();\n  const { profile } = useUserProfile();\n  const buildDappMessageSignature = useBuildDappMessageSignature(props);\n  const { disableConfirmButton } = useContext(BlocklistContext);\n  const [convertedMessage, setConvertedMessage] = useState('');\n  const [ledgerError, setLedgerError] = useState<LedgerError | undefined>(undefined);\n  const handleNextQueuedRequest = useHandleNextQueuedRequest();\n  const hasNextQueuedRequest = useHasNextQueuedRequest();\n  const web3Cancel = useCancel();\n  const [hardwareWalletSigning, setHardwareWalletSigning] =\n    useRecoilState(hardwareWalletSigningAtom);\n  log('options request params', options.request);\n  const isEVMSigningRequest = dappProviderType === EVM_PROVIDER_ID;\n  const { message, addPrefix, typedDataJson } = (options as SignEthereumMessage).request.params;\n  const isSpecialMessage = !addPrefix && !typedDataJson && isEVMSigningRequest;\n  const formattedDappURL = new URL(options.dappURL).hostname;\n  const blockchain = DAPP_PROVIDER_PRIMARY_BLOCKCHAIN_MAPPING[dappProviderType];\n\n  const isMultiAccountPhase1Enabled = useIsMultiAccountPhase1Enabled();\n\n  useEffect(\n    function attemptSetConvertedMessage() {\n      if (isEVMSigningRequest) {\n        if (typedDataJson) {\n          setConvertedMessage(typedDataJson);\n          return;\n        }\n        try {\n          setConvertedMessage(hexToString(message as Hex));\n        } catch (err) {\n          log('SignatureRequest: Could not convert hex to string', err);\n          setConvertedMessage(`${message}`);\n        }\n      } else {\n        const msg = (options as SolanaSignMessage).request.params.message;\n        setConvertedMessage(msg);\n      }\n    },\n    [isEVMSigningRequest, message, typedDataJson, options],\n  );\n\n  const onCancel = useCallback(\n    (error: Error) => {\n      web3Cancel({\n        eventId: options.eventId,\n        error,\n        dappURL: options.dappURL,\n        blockchain,\n        request: options.kind,\n      });\n      if (hasNextQueuedRequest()) {\n        handleNextQueuedRequest();\n      } else {\n        sendScheduledEvents();\n        window.close();\n      }\n    },\n    [\n      web3Cancel,\n      options.eventId,\n      options.dappURL,\n      options.kind,\n      handleNextQueuedRequest,\n      hasNextQueuedRequest,\n      blockchain,\n    ],\n  );\n\n  const onError = useCallback(\n    (err: Error) => {\n      triggerWeb3SignMessageError({\n        dappURL: options.dappURL,\n        request: options.kind,\n        blockchain,\n        errorName: err.name,\n        errorMessage: err.message,\n      });\n      log(err);\n      onCancel(err);\n    },\n    [blockchain, onCancel, options],\n  );\n\n  const onReject = useCallback(() => {\n    triggerWeb3CancelMessageClicked({\n      dappURL: options.dappURL,\n      request: options.kind,\n      blockchain,\n    });\n    onCancel(WalletUIError.UserRejectedRequest);\n  }, [blockchain, onCancel, options]);\n\n  const onSignSuccess = useCallback(\n    (signature: Buffer) => {\n      if (props.dappProviderType === EVM_PROVIDER_ID) {\n        completeSignedEVMMessage(props.options, signature);\n      } else {\n        completeSignedSolanaMessage(props.options, signature);\n      }\n\n      if (hasNextQueuedRequest()) {\n        handleNextQueuedRequest();\n      } else {\n        sendScheduledEvents();\n        window.close();\n      }\n    },\n    [handleNextQueuedRequest, hasNextQueuedRequest, props.dappProviderType, props.options],\n  );\n\n  const handleSignMessage = useCallback(\n    async (mnemonic: string) => {\n      try {\n        const signature = await buildDappMessageSignature({ mnemonic });\n        onSignSuccess(signature);\n      } catch (e: any) {\n        onError(e as Error);\n      }\n    },\n    [buildDappMessageSignature, onSignSuccess, onError],\n  );\n\n  const handleUnlock = useCallback(\n    (unlockResult: UnlockResult) => {\n      if (unlockResult.status === 'SUCCESS' && unlockResult.mnemonic) {\n        handleSignMessage(unlockResult.mnemonic);\n      } else {\n        onError(new Error('Unknown please try again'));\n      }\n    },\n    [handleSignMessage, onError],\n  );\n\n  const signLedgerError = useCallback(\n    (err: Error) => {\n      if (err.name.startsWith('Transport')) {\n        log(err);\n        setLedgerError(err as LedgerError);\n      } else {\n        onError(err);\n      }\n    },\n    [onError],\n  );\n\n  const { signMessageLedger, isSignMessageLedgerLoading, hardwareWalletScreen } =\n    useSignMessageLedger({\n      message,\n      typedDataJson,\n      signSuccess: onSignSuccess,\n      signError: signLedgerError,\n    });\n\n  const handleClickSign = useCallback(() => {\n    triggerWeb3SignMessageClicked({\n      dappURL: options.dappURL,\n      request: options.kind,\n      blockchain,\n    });\n    if (isStandalone) {\n      appLockRepository.unlock(AppLockTypes.Transaction).subscribe(handleUnlock);\n    } else if (isLedger) {\n      if (isEVMSigningRequest) {\n        signMessageLedger();\n      } else {\n        // This code path will not be possible once we prevent HW wallet users from connecting to Solana dapps (see WALL-7368)\n        onError(\n          new Error(\n            `Cannot sign request for Ledger: Unsupported dapp provider '${props.dappProviderType}'`,\n          ),\n        );\n      }\n    }\n  }, [\n    options.dappURL,\n    options.kind,\n    blockchain,\n    isStandalone,\n    isLedger,\n    handleUnlock,\n    isEVMSigningRequest,\n    signMessageLedger,\n    onError,\n    props.dappProviderType,\n  ]);\n\n  const handleLedgerErrorOnBack = useCallback(() => {\n    setLedgerError(undefined);\n    setHardwareWalletSigning(false);\n  }, [setHardwareWalletSigning]);\n\n  const setAlternativeDappLogoURL = useCallback(\n    (ev) => {\n      // eslint-disable-next-line no-param-reassign\n      ev.target.src = options.dappLogoURLAlt;\n    },\n    [options.dappLogoURLAlt],\n  );\n\n  const warningMessage = useMessageScanner(\n    (options as SignEthereumMessage).request || (options as SolanaSignMessage).request,\n    formattedDappURL, // dapp hostname\n  );\n\n  if ((isSpecialMessage || ledgerError || !isEVMSigningRequest) && isLedger) {\n    let statusCode = UNSUPPORTED_SIGNING_CODE;\n    if (ledgerError?.statusCode) {\n      statusCode = ledgerError.statusCode;\n    }\n    return (\n      <VStack spacingHorizontal={3} spacingTop={3}>\n        <HWTroubleConnecting statusCode={statusCode} handleBack={handleLedgerErrorOnBack} />\n      </VStack>\n    );\n  }\n\n  if (hardwareWalletSigning) {\n    return hardwareWalletScreen;\n  }\n\n  return (\n    <VStack height=\"100%\" testID=\"signature-request-component\">\n      <VStack spacingHorizontal={3} spacingTop={0} spacingBottom={1} height=\"100%\">\n        <VStack flexGrow={1}>\n          <VStack flexGrow={0} spacingBottom={1}>\n            {isMultiAccountPhase1Enabled && (\n              <HStack justifyContent=\"flex-end\">\n                <Tooltip\n                  content={\n                    profile &&\n                    formatMessage(messages.userAvatarToolTip, {\n                      profile: profile.isUsername ? `@${profile.username}` : profile.address,\n                    })\n                  }\n                  placement=\"bottom\"\n                >\n                  <UserAvatar size=\"xxl\" variant=\"icon\" />\n                </Tooltip>\n              </HStack>\n            )}\n            <Box spacingBottom={2} flexGrow={1} justifyContent=\"center\">\n              <img\n                alt={options.dappLogoURLAlt}\n                src={options.dappLogoURL}\n                onError={setAlternativeDappLogoURL}\n                className={circleImage}\n              />\n            </Box>\n            <Box flexGrow={1} justifyContent=\"center\" spacingBottom={0.5}>\n              <TextTitle3 as=\"p\" testID=\"signature-title\">\n                {isSpecialMessage\n                  ? formatMessage(messages.specialSignatureRequest)\n                  : formatMessage(messages.signatureRequested)}\n              </TextTitle3>\n              <Box alignItems=\"center\">\n                <Tooltip\n                  testID=\"signature-tooltip\"\n                  content={formatMessage(messages.signatureRequestedTooltip)}\n                  placement=\"bottom\"\n                >\n                  <Icon name=\"info\" size=\"xs\" color=\"foreground\" spacingStart={1} />\n                </Tooltip>\n              </Box>\n            </Box>\n            <Box justifyContent=\"center\">\n              <TextBody as=\"p\" color=\"foregroundMuted\">\n                {formattedDappURL}\n              </TextBody>\n            </Box>\n          </VStack>\n          <VStack>\n            <TextHeadline as=\"p\" spacingTop={1} spacingBottom={1} spacingEnd={1}>\n              {formatMessage(messages.messageLabel)}:\n            </TextHeadline>\n            <Box\n              bordered\n              borderRadius=\"compact\"\n              borderColor=\"secondary\"\n              spacingHorizontal={1}\n              spacingTop={1}\n              flexGrow={1}\n            >\n              <Box flexGrow={1} overflow=\"scroll\">\n                <TextLabel2 as=\"div\" color=\"foregroundMuted\" testID=\"message-content\">\n                  <pre\n                    style={{\n                      whiteSpace: typedDataJson ? 'pre-wrap' : 'normal',\n                      maxHeight: warningMessage ? '180px' : '220px',\n                    }}\n                    className={preSpacing}\n                  >\n                    {convertedMessage}\n                  </pre>\n                </TextLabel2>\n              </Box>\n            </Box>\n          </VStack>\n        </VStack>\n      </VStack>\n      <VStack spacingBottom={2}>\n        {warningMessage ? (\n          <WarningBanner\n            spacingBottom={0.5}\n            message={warningMessage}\n            isDismissible={false}\n            showErrorIcon\n            testID=\"sign-txn-warning\"\n          />\n        ) : null}\n        <VStack gap={1} spacingHorizontal={3} spacingTop={1} testID=\"button-area\">\n          <ButtonGroup accessibilityLabel=\"Group\" block>\n            <Button testID=\"cancel-message\" onPress={onReject} block variant=\"secondary\">\n              {formatMessage(messages.cancelButtonLabel)}\n            </Button>\n            <Button\n              testID=\"sign-message\"\n              onPress={handleClickSign}\n              block\n              loading={isSignMessageLedgerLoading}\n              disabled={disableConfirmButton}\n            >\n              {formatMessage(messages.signButtonLabel)}\n            </Button>\n          </ButtonGroup>\n        </VStack>\n      </VStack>\n    </VStack>\n  );\n}\n\nconst circleImage = css`\n  width: 80px;\n  height: 80px;\n  border-radius: 50%;\n`;\n\nconst preSpacing = css`\n  word-break: break-word;\n  margin: 0;\n`;\n"]}*/

/*# sourceMappingURL=6652.css.map*/